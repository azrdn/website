---
import { getCollection, render } from "astro:content"
import type { GetStaticPaths } from "astro"
import CopyBtn from "../../components/copy_btn.astro"
import Footer from "../../components/footer.astro"
import Navbar from "../../components/navbar.astro"
import Toc from "../../components/toc.astro"
import Layout from "../../layouts/posinega.astro"

const iso_date = (date: Date) => date.toISOString().slice(0, 10)

export const getStaticPaths = (async () => {
	const [md_collection, mdx_collection] = await Promise.all([
		getCollection("blog"),
		getCollection("blog_mdx"),
	])
	const all_posts = [
		...md_collection.map(post => ({ ...post, type: "md" })),
		...mdx_collection.map(post => ({ ...post, type: "mdx" })),
	]

	return all_posts.map(post => ({
		params: { slug: post.id },
		props: { post, fm: post.data },
	}))
}) satisfies GetStaticPaths

const { post, fm } = Astro.props
const { Content, headings } = await render(post)

import "../../styles/blog.css"
---

<script define:vars={{ id: post.id }} type="module">
	await fetch("/api/hits", { method: "POST", body: id })
		.then(res => res.text())
		.then(hits => {
			const hits_el = document.getElementById("pagehits")
			if (hits_el) hits_el.textContent = hits
		})
		.catch(err => console.error("Failed to fetch page hits:", err))
</script>

<Layout title={fm.title}>
	<Navbar slot="header" />
	<article>
		<header>
			<h1>{fm.title}</h1>
			<p>
				Raw file:
				<a href={`/blog/${post.id}.${post.type}`}>{post.id}.{post.type}</a>
			</p>
			<p id="info">
				<span>Publ: <time>{iso_date(fm.createdAt)}</time></span>
				{fm.updatedAt &&
					<span>Upd: <time>{iso_date(fm.updatedAt)}</time></span>
				}
				<span class="js">Hits: <span id="pagehits">...</span></span>
			</p>
			{
				headings.length > 0 && (
					<details id="_toc">
						<summary>Table of Contents</summary>
						<Toc {headings} />
					</details>
				)
			}
		<hr />
		</header>
		<div class="content"><Content /></div>
	</article>
	<CopyBtn />
	<Footer slot="footer" />
</Layout>

<style>
	#info {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5em 2ch;

		> * {
			border: 2px solid var(--bg-secondary);
			padding: 0.1em calc(1ch - 2px);
		}

		#pagehits {
			display: inline-block;
			width: 3ch;
			text-align: right;
		}
	}

	#_toc {
		border-radius: 4px;

		ul {
			list-style-type: disc;
			margin-bottom: 0;
		}
	}

	@media (width >= 1600px) {
		#_toc {
			position: fixed;
			padding: 1em 2ch;
			background-color: var(--bg);
			top: 0;
			right: 2ch;
			max-height: 90svh;
			width: 35ch;

			&[open] {
				overflow-y: scroll;
			}
		}
	}
</style>
